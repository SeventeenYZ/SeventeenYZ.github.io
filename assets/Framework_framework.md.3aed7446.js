import{_ as e,c,o as a,a as o}from"./app.b344f6e2.js";const V=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"可变数据与不可变数据","slug":"可变数据与不可变数据","link":"#可变数据与不可变数据","children":[]},{"level":2,"title":"单向数据流","slug":"单向数据流","link":"#单向数据流","children":[]},{"level":2,"title":"关于Vue和React的看法","slug":"关于vue和react的看法","link":"#关于vue和react的看法","children":[]}],"relativePath":"Framework/framework.md"}'),t={name:"Framework/framework.md"},d=o('<h2 id="可变数据与不可变数据" tabindex="-1">可变数据与不可变数据 <a class="header-anchor" href="#可变数据与不可变数据" aria-hidden="true">#</a></h2><p><code>Vue</code>的可变数据是因为拦截了写入操作会去做对应的通知和更新</p><p><code>React</code>的不可变数据指的是在一次渲染中<code>state</code>的值是不会变的，而且也不能去直接修改state，需要通过调用<code>setState</code>把这个变化事件通知给<code>React Core</code>，<code>React Core</code>做修改<code>state</code>以及一系列调度工作之后，进行下一次渲染</p><p>这是两个框架的响应式系统最大的区别</p><h2 id="单向数据流" tabindex="-1">单向数据流 <a class="header-anchor" href="#单向数据流" aria-hidden="true">#</a></h2><p>在我的理解中，<code>Vue</code>和<code>React</code>都是单向数据流</p><p><code>Vue</code>所谓的双向绑定只在表单组件中，其实质也是监听事件而后赋值的语法糖</p><p>而传<code>prop</code>时，<code>Vue</code>也是提示不可以修改<code>prop</code>的值，这也说明不是真正意义上的双向绑定</p><p><code>Vue</code>和<code>React</code>的数据流向区别在于<code>Vue</code>子组件想修改父组件的值是通过发送事件，父组件监听事件后去修改，而<code>React</code>是父组件将修改值的函数当成<code>prop</code>传递给子组件直接调用</p><h2 id="关于vue和react的看法" tabindex="-1">关于Vue和React的看法 <a class="header-anchor" href="#关于vue和react的看法" aria-hidden="true">#</a></h2><p>搞不懂为什么有那么多踩一捧一的评论，Vue和React都只是构建视图层的库，背后的思想是异曲同工的，对开发者来说无非就是个人喜好问题，例如<code>api</code>、语法风格的偏好</p><p>Vue和React这类框架都是状态驱动视图，让开发者不必关心数据和视图的对应关系，如果深入理解其中一个，那么上手另一个的成本是相当低的，比如都是引入虚拟Dom通过diff计算只更新部分视图，比如我想在可以访问数据并且可以赋值的时间点调用后端接口来赋值，想在某个数据变化的时候去更新依赖，父子组件通信，提取可复用逻辑等等，实现原理各有千秋，但是框架思想是相通的</p><p>至于说Vue不适合大型项目更是好笑，决定工程质量更大的因素是团队规范、项目架构、设计统一，而不是因为选了Vue导致的，水平不行用啥框架写出来都是一团糟</p><p>考虑Vue和React除了项目主导者个人偏好外，更多情况应该是它们背后一系列工具和生态的问题，例如跨端app你选择只有React Native（Weex已凉），至于Flutter除非组内成员计算机素养都合格，并且有人能hold住，否则还是别折腾了</p><p>另外React太过灵活，一个页面或一个功能可以有多种方式实现，水平参差不齐的人写出来的代码不管执行效率、可读性、维护性都可以是天差地别的，对React理解不深的人，滥用useState和useEffect的情况比比皆是</p><p>相比较而言，Vue的功能实现会比较统一，不会太过千人千面</p><p>至于Vue2和Vue3的区别，对于熟悉Vue2的来说，Vue3不过是换了种写法，并且换了一些更好用的<code>api</code>，思想都是一样的，更不必讨论直接学Vue3还是先学Vue2</p>',17),r=[d];function p(u,i,s,n,l,h){return a(),c("div",null,r)}const f=e(t,[["render",p]]);export{V as __pageData,f as default};
