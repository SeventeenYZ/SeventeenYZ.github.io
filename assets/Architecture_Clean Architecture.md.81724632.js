import{_ as s,c as a,o as n,a as e}from"./app.c0601825.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"domain层","slug":"domain层","link":"#domain层","children":[{"level":3,"title":"entities","slug":"entities","link":"#entities","children":[]},{"level":3,"title":"use cases","slug":"use-cases","link":"#use-cases","children":[]}]},{"level":2,"title":"UI层","slug":"ui层","link":"#ui层","children":[]},{"level":2,"title":"services层","slug":"services层","link":"#services层","children":[]}],"relativePath":"Architecture/Clean Architecture.md"}'),l={name:"Architecture/Clean Architecture.md"},o=e(`<p><a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noreferrer">Clean Architecture</a><br><a href="https://dev.to/bespoyasov/clean-architecture-on-frontend-4311" target="_blank" rel="noreferrer">参考资料1</a><br><a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/#components" target="_blank" rel="noreferrer">参考资料2</a><br><a href="https://github.com/bespoyasov/frontend-clean-architecture" target="_blank" rel="noreferrer">项目参考</a></p><h2 id="domain层" tabindex="-1">domain层 <a class="header-anchor" href="#domain层" aria-hidden="true">#</a></h2><p>也叫Business Layer业务层，用实体和数据描述领域，核心业务，与UI层使用框架（React、Vue等)无关</p><p>domain层包含entities（实体）和use cases（用例函数）</p><h3 id="entities" tabindex="-1">entities <a class="header-anchor" href="#entities" aria-hidden="true">#</a></h3><p>用户、商品、购物车、订单等，是创建实体的工厂</p><h3 id="use-cases" tabindex="-1">use cases <a class="header-anchor" href="#use-cases" aria-hidden="true">#</a></h3><p>会转换实体数据的函数，描述了一类场景，添加购物车、计算总额，功能是负责响应事件发生后对应去做某件事，逻辑对外层屏蔽，只返回结果</p><p>use cases层输出（数据和函数）和UI层打交道，输入（获取数据）和services层打交道</p><h2 id="ui层" tabindex="-1">UI层 <a class="header-anchor" href="#ui层" aria-hidden="true">#</a></h2><p>组合各个组件拼成页面，并绑定事件调用use cases层提供的用例函数，并获取调用结果，改变UI层代码（如Vue迁移到React）不会影响use cases层和domain层</p><p>UI层（也有的叫Presentation Layer表现层）只做纯粹的数据展示和函数绑定，消费services层提供的数据、触发use cases层的用例函数</p><p>例如结账页面，点击结账按钮 =&gt; 检索购物车 =&gt; 调用生成订单接口 =&gt; 支付订单 =&gt; 如果失败则通知用户 =&gt; 清空购物车并展示订单</p><p>从检索购物车到支付订单只需要调用use cases提供的用例函数，该用例函数专门描述结账场景，而UI层只需要在用户结账按钮去调用触发这个用例函数，并且响应结账结果即可</p><h2 id="services层" tabindex="-1">services层 <a class="header-anchor" href="#services层" aria-hidden="true">#</a></h2><p>负责提供服务和数据（请求接口、转化数据提供给ui层等），外部服务需要和我们需求相适配，如果不适配那么需要一个适配器（即派生出一个Adapter层），我需要什么样的数据，外层服务就给我做成什么样</p><p>网上关于Clean Architecture的文章，划分的层次名称与层级不一定相同，但大体思想是一样的</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useAddToCart</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">storage</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">CartStorageService</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useCartStorage</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 用例函数：添加到购物车</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">addToCart</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">user</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">product</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Product</span><span style="color:#89DDFF;">):</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">cart</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">storage</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 获取购物车</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">updated</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">addProduct</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">cart</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">product</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 获取添加购物车后的最新值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">storage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateCart</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">updated</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 更新购物车</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 提供给UI层的&quot;添加到购物车&quot;按钮绑定</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">addToCart</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,18),t=[o];function p(r,c,i,y,F,d){return n(),a("div",null,t)}const u=s(l,[["render",p]]);export{h as __pageData,u as default};
