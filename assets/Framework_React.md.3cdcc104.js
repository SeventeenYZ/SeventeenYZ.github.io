import{_ as s,c as a,o as n,a as e}from"./app.13185f86.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"声明计算属性","slug":"声明计算属性","link":"#声明计算属性","children":[]},{"level":2,"title":"useRef","slug":"useref","link":"#useref","children":[]},{"level":2,"title":"Fragment (<>...</>)","slug":"fragment","link":"#fragment","children":[]}],"relativePath":"Framework/React.md"}'),o={name:"Framework/React.md"},l=e(`<p><a href="https://beta.reactjs.org" target="_blank" rel="noreferrer">官网</a></p><h2 id="声明计算属性" tabindex="-1">声明计算属性 <a class="header-anchor" href="#声明计算属性" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">amount1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setAmount1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">amount2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setAmount2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> totalAmount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMemo</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> amount1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> amount2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [amount1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> amount2]) </span><span style="color:#676E95;font-style:italic;">// 相当于vue的computed</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> totalAmount </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> amount1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> amount2 </span><span style="color:#676E95;font-style:italic;">// 和useMemo区别是触发渲染会重新计算</span></span>
<span class="line"></span></code></pre></div><h2 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-hidden="true">#</a></h2><p>可以读取或写入，写入时不会触发渲染，当修改值不需要重新渲染时，使用<code>useRef</code>节省开销</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ref </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// ref.current = 0</span></span>
<span class="line"></span></code></pre></div><h2 id="fragment" tabindex="-1">Fragment (&lt;&gt;...&lt;/&gt;) <a class="header-anchor" href="#fragment" aria-hidden="true">#</a></h2><p>相当于<code>Vue</code>的<code>&lt;template&gt;</code>，<code>&lt;Fragment&gt;</code>大多数情况下等同于<code>&lt;&gt;...&lt;/&gt;</code>，区别在于渲染列表时，<code>&lt;&gt;...&lt;/&gt;</code>不能设定key而<code>&lt;Fragment&gt;</code>可以</p>`,8),t=[l];function p(c,r,A,C,y,D){return n(),a("div",null,t)}const F=s(o,[["render",p]]);export{d as __pageData,F as default};
