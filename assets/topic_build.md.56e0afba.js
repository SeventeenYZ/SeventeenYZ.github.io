import{_ as s,c as e,o as a,a as n}from"./app.aa9074ec.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Webpack","slug":"webpack","link":"#webpack","children":[]},{"level":2,"title":"优化","slug":"优化","link":"#优化","children":[]},{"level":2,"title":"调试","slug":"调试","link":"#调试","children":[]},{"level":2,"title":"构建","slug":"构建","link":"#构建","children":[]}],"relativePath":"topic/build.md"}'),o={name:"topic/build.md"},p=n(`<p><a href="https://antfu.me/posts/why-not-prettier-zh" target="_blank" rel="noreferrer">为什么不用prettier</a></p><p>随着前端的发展，各种提升开发效率的工具层出不穷，而浏览器只识别<code>html</code>、<code>css</code>和<code>js</code>，构建需要做的事情有以下这些</p><p>代码转换：将<code>TypeScript</code>编译成<code>JavaScript</code>、将<code>scss</code>编译成<code>css</code>等</p><p>文件优化：压缩<code>JavaScript</code>、<code>css</code>、<code>html</code>代码，压缩合并图片等</p><p>代码分割：提取公共代码，提取不需要立即执行的代码让其懒加载或异步加载</p><p>热更新：监听本地源代码的变化，自动重新构建、刷新浏览器</p><p><code>tree shaking</code>：去除没用到的代码</p><h2 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h2><p>打包流程</p><p>1、读取配置</p><p>2、启动<code>webpack</code>，创建<code>Compiler</code>对象并开始解析项目</p><p>3、从入口文件（<code>entry</code>）开始，找到其导入的依赖模块，递归遍历分析，生成依赖关系树</p><p>4、对不同文件类型的文件使用对应的<code>loader</code>编译，最终转为<code>JavaScript</code>文件</p><p>5、编译过程中会通过发布订阅模式，向外抛出一些<code>hooks</code>，<code>webpack</code>的<code>plugin</code>可通过监听事件节点执行插件功能</p><h2 id="优化" tabindex="-1">优化 <a class="header-anchor" href="#优化" aria-hidden="true">#</a></h2><p>区分<code>package.json</code>中<code>devDependencies</code>和<code>dependencies</code>，开发环境的依赖不打包进生产环境的构建包</p><h2 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-hidden="true">#</a></h2><p>查看返回的<code>json</code>数据大小</p><h2 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-hidden="true">#</a></h2><p>合理配置<code>hash</code>，改过的文件需要更新<code>hash</code>值，这样才能保证上线后，浏览器访问没有改变的文件时能命中缓存，而改过的文件会重新请求</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.base.js</span></span>
<span class="line"><span style="color:#A6ACCD;">modules</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">export </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">    output: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 给js文件加上contenthash</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">js/chunk-[contenthash].js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">clean</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,21),l=[p];function c(t,r,d,i,D,h){return a(),e("div",null,l)}const C=s(o,[["render",c]]);export{F as __pageData,C as default};
