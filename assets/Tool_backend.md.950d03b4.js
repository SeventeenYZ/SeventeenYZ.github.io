import{_ as e,c as o,o as c,a as d}from"./app.7e0fabb3.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Spring Boot","slug":"spring-boot","link":"#spring-boot","children":[]}],"relativePath":"Tool/backend.md"}'),a={name:"Tool/backend.md"},p=d('<h2 id="spring-boot" tabindex="-1">Spring Boot <a class="header-anchor" href="#spring-boot" aria-hidden="true">#</a></h2><p>后端概念</p><p><code>jdk</code>：<code>java</code>运行环境，类似于<code>Node.js</code></p><p><code>pom.xml</code>：依赖关系文件，类似于<code>package.json</code></p><p><code>Maven</code>：项目构建和依赖管理工具，类似于<code>npm</code> + <code>webpack</code></p><p><code>application.properties</code>：相当于<code>webpack.config.js</code>，额外的配置</p><p>Controller：接收前端请求并作出反应，可通过注解获取参数、header等</p><p>Service：一般<code>Controller</code>接收请求后调用<code>Service</code>中的方法返回响应数据，主要是为了分层设计</p><p>拦截器：接收请求前做一些操作（权限检查，没登录不让跳到<code>Controller</code>），请求处理完成后在返回响应数据前做一些操作，类似<code>Axios</code>的拦截器，<code>Koa</code>的中间件，可以定义拦截哪些路径或过滤哪些路径</p><p>ORM：对象关系映射，为了解决对象与关系数据库不匹配的情况，将对象映射到数据库的一项技术，例如MyBatis</p><p>数据库连接池：数据库连接池是管理数据库连接的，当后端程序和数据库建立连接后将连接保存在池中，当有请求来时，直接用这个连接对数据库进行访问，而不用再生成新的连接</p><p><code>Navicat</code>：一种数据库管理工具，提供可视化管理页面</p>',12),t=[p];function r(n,i,s,_,l,h){return c(),o("div",null,t)}const g=e(a,[["render",r]]);export{b as __pageData,g as default};
