import{_ as e,c as o,o as s,a}from"./app.25f732f0.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"行内元素和float元素","slug":"行内元素和float元素","link":"#行内元素和float元素","children":[]},{"level":2,"title":"本地存储","slug":"本地存储","link":"#本地存储","children":[]},{"level":2,"title":"浏览器渲染","slug":"浏览器渲染","link":"#浏览器渲染","children":[{"level":3,"title":"渲染流程","slug":"渲染流程","link":"#渲染流程","children":[]},{"level":3,"title":"布局和回流","slug":"布局和回流","link":"#布局和回流","children":[]}]},{"level":2,"title":"踩坑记录","slug":"踩坑记录","link":"#踩坑记录","children":[{"level":3,"title":"table文字换行问题","slug":"table文字换行问题","link":"#table文字换行问题","children":[]}]}],"relativePath":"basis/HTML.md"}'),l={name:"basis/HTML.md"},n=a(`<h2 id="行内元素和float元素" tabindex="-1">行内元素和float元素 <a class="header-anchor" href="#行内元素和float元素" aria-hidden="true">#</a></h2><p>行内元素：无法设置宽高；内外边距只对左、右两边起作用；行内元素内无法放块元素（可通过设置<code>display: inline-block</code>来改变 ）</p><p><code>float</code>元素：浮动元素，<code>display</code>属性会变为<code>block</code>。 <code>float</code>元素和<code>inline-block</code>元素都可设置宽高和水平排列，区别在于：<code>float</code>元素会脱离文档流（除了文字内容，即文字环绕效果），而<code>inline-block</code>元素不会</p><h2 id="本地存储" tabindex="-1">本地存储 <a class="header-anchor" href="#本地存储" aria-hidden="true">#</a></h2><p><code>Local Storage</code>：保存的数据没有过期时间，需要手动删除，存储空间5M</p><p><code>Session Storage</code>：保存的数据在页面关闭后会被删除，存储空间5M</p><p><code>Cookies</code>：过期时间自己设置，安全性不高，容易被拦截，存储空间4k</p><p>相同点：都是保存在客户端，且同源共享</p><p>不同点：<code>Cookies</code>数据由服务端设置，参与通信；<code>Session Storage</code>和<code>Local Storage</code>由客户端设置，不参与通信</p><p><code>Cookies</code>属性： ① <code>Domain</code>：域，表示请求的<code>url</code>符合这个格式的请求时才会带上这个<code>cookie</code> ② <code>Path</code>：路径前缀，符合这个路径的请求<code>url</code>才会带上 ③ <code>Secure</code>：为true时表示使用<code>https</code>协议才发送这个<code>cookie</code> ④ <code>HttpOnly</code>：为true时表示无法通过<code>js</code>脚本读取到这个<code>cookie</code>，防止<code>XSS</code>攻击 ⑤ <code>Expires/Max-Age</code>：过期时间</p><h2 id="浏览器渲染" tabindex="-1">浏览器渲染 <a class="header-anchor" href="#浏览器渲染" aria-hidden="true">#</a></h2><p>浏览器接收到服务器返回的代码后进行解析，经过<code>DOM</code>构造、布局和绘制三个步骤来展现</p><h3 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-hidden="true">#</a></h3><ol><li><p>解析<code>html</code>文件构造<code>DOM</code>树（也叫做<code>content</code>树）</p></li><li><p>解析<code>css</code>文件，和<code>html</code>里的<code>visual instuctions</code>（应该指的是能展示的标签，即不包括<code>script</code>等）构造<code>render树</code></p><p><code>DOM</code>构造：浏览器将接收到的<code>HTML</code>代码通过<code>HTML</code>解析器解析构建成一颗<code>DOM</code>树，同时将接收到的<code>CSS</code>代码通过<code>CSS</code>解析器构建出样式表规则（<code>CSSOM</code>），然后将这些规则分别放到对应的<code>DOM</code>树节点上，得到一颗带有样式属性的<code>DOM</code>树（<code>render树</code>）</p></li><li><p><code>layout</code>（布局）：浏览器按从上到下，从左到右的顺序读取<code>DOM</code>树的<code>node</code>，然后开始获取<code>node</code>的坐标和大小等<code>css</code>属性，把每个<code>node</code>定位到对应的坐标</p></li><li><p><code>painting</code>（绘制）：遍历<code>render</code>树，用<code>UI backend layer</code>把每个<code>node</code>绘制出来</p></li></ol><h3 id="布局和回流" tabindex="-1">布局和回流 <a class="header-anchor" href="#布局和回流" aria-hidden="true">#</a></h3><p>一个意思，<code>Webkit rendering engine</code>把将元素放置在屏幕的某个位置的操作叫做<code>layout</code>，而在<code>Gecko rendering endgine</code>中叫做<code>Reflow</code>（回流）</p><h2 id="踩坑记录" tabindex="-1">踩坑记录 <a class="header-anchor" href="#踩坑记录" aria-hidden="true">#</a></h2><h3 id="table文字换行问题" tabindex="-1">table文字换行问题 <a class="header-anchor" href="#table文字换行问题" aria-hidden="true">#</a></h3><p>使用<code>table</code>标签时，当需要显示一段很长的文字时，可能不会换行，需要在<code>table</code>标签添加以下样式属性</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">table</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">table-layout: fixed;word-break: break-all</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">tr</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">height</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">30pt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">td</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">colspan</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">margin-left: 10pt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ dataObj.orderNo }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">td</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">td</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">colspan</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">margin-left: 10pt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{ dataObj.phone }}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">td</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">tr</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">table</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,20),c=[n];function p(t,d,r,i,D,F){return s(),o("div",null,c)}const u=e(l,[["render",p]]);export{h as __pageData,u as default};
