import{_ as e,c as a,o as s,a as n}from"./app.48eae92b.js";const t="/assets/git-branch-model.521746e0.png",A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[{"level":3,"title":"开发新功能","slug":"开发新功能","link":"#开发新功能","children":[]},{"level":3,"title":"想切换分支，而本地改动还不想提交","slug":"想切换分支-而本地改动还不想提交","link":"#想切换分支-而本地改动还不想提交","children":[]}]}],"relativePath":"Library/Git.md"}'),o={name:"Library/Git.md"},l=n('<p><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noreferrer">可视化Git学习</a></p><p><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noreferrer">猴子都能懂的git入门</a></p><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-hidden="true">#</a></h2><p><code>git init</code>：git相当于生成一个虚拟区（包含<code>staged environment</code>和<code>local repository</code>）与你的实际工作区目录（<code>workspace</code>）建立联系</p><p><code>git add</code>：表示让git追踪文件变化，变化会反映到<code>staged environment</code></p><p><code>git commit</code>：<code>staged environment</code>将此时追踪的文件变化生成一个节点，提交到<code>local repository</code></p><p><code>git push</code>：将<code>local repository</code>同步到<code>remote repository</code></p><p>分支模型：<code>HEAD</code>是指向当前分支节点的指针，假设从<code>main</code>分支创建<code>feature</code>分支，此时<code>main</code>和<code>feature</code>两条分支的节点是相同的，分别进行提交后才会走不同的分支路线</p><p><code>git merge xxx</code>：在当前分支上创建一个节点，合并当前分支和xxx分支的代码到此节点中</p><p><code>git revert</code>和<code>git reset</code>：<code>git revert</code>是创建一个新节点，内容与指定节点相同，而<code>git reset</code>是将<code>HEAD</code>直接挪到指定节点</p><p><img src="'+t+`" alt="图片加载失败"></p><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-hidden="true">#</a></h2><h4 id="删除远程分支" tabindex="-1">删除远程分支 <a class="header-anchor" href="#删除远程分支" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">git push origin :foo // 删除远程的foo分支</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="开发新功能" tabindex="-1">开发新功能 <a class="header-anchor" href="#开发新功能" aria-hidden="true">#</a></h3><p>例如要从<code>master</code>分支创建新分支</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout master // 切换到master分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git pull // 拉取最新代码</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -b newBranch // 创建并切换到新分支</span></span>
<span class="line"><span style="color:#A6ACCD;">git pull origin newBranch // 拉取远程同名分支代码</span></span>
<span class="line"><span style="color:#A6ACCD;">git push // 看提示</span></span>
<span class="line"><span style="color:#A6ACCD;">git push --set-upstream origin newBranch // 关联到远程分支</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">git pull = git fetch + git merge</span></span>
<span class="line"><span style="color:#A6ACCD;">git pull --rebase = git fetch + git rebase</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="想切换分支-而本地改动还不想提交" tabindex="-1">想切换分支，而本地改动还不想提交 <a class="header-anchor" href="#想切换分支-而本地改动还不想提交" aria-hidden="true">#</a></h3><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">git stash // 把本地的改动先缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">git pull</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash pop // 把刚刚缓存的再拉出来</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div>`,20),c=[l];function i(p,r,d,g,h,C){return s(),a("div",null,c)}const _=e(o,[["render",i]]);export{A as __pageData,_ as default};
